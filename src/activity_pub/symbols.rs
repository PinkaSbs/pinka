use std::sync::OnceLock;

use bimap::BiBTreeMap;

static SYMBOL_TABLE: OnceLock<BiBTreeMap<&str, usize>> = OnceLock::new();

pub(super) fn activitystreams_symbol_table() -> &'static BiBTreeMap<&'static str, usize> {
    SYMBOL_TABLE.get_or_init(|| {
        let mut bimap = BiBTreeMap::new();
        for (index, &symbol) in SYMBOLS.iter().enumerate() {
            bimap.insert(symbol, index);
        }
        bimap
    })
}

static SYMBOLS: [&str; 195] = [
    // JSON-LD
    "@base",
    "@container",
    "@context",
    "@direction",
    "@graph",
    "@id",
    "@import",
    "@include",
    "@index",
    "@json",
    "@language",
    "@list",
    "@nest",
    "@none",
    "@prefix",
    "@propagate",
    "@protected",
    "@reverse",
    "@set",
    "@type",
    "@value",
    "@version",
    "@vocab",
    // ActivityStreams & ActivityPub
    "xsd",
    "http://www.w3.org/2001/XMLSchema#",
    "as",
    "https://www.w3.org/ns/activitystreams#",
    "ldp",
    "http://www.w3.org/ns/ldp#",
    "vcard",
    "http://www.w3.org/2006/vcard/ns#",
    "id",
    "type",
    "https://www.w3.org/ns/activitystreams",
    "https://www.w3.org/ns/activitystreams#Public",
    "Accept",
    "Activity",
    "Add",
    "Announce",
    "Application",
    "Arrive",
    "Article",
    "Audio",
    "Block",
    "Collection",
    "CollectionPage",
    "Create",
    "Delete",
    "Dislike",
    "Document",
    "Event",
    "Flag",
    "Follow",
    "Group",
    "Ignore",
    "Image",
    "IntransitiveActivity",
    "Invite",
    "IsContact",
    "IsFollowedBy",
    "IsFollowing",
    "IsMember",
    "Join",
    "Leave",
    "Like",
    "Link",
    "Listen",
    "Mention",
    "Move",
    "Note",
    "Object",
    "Offer",
    "OrderedCollection",
    "OrderedCollectionPage",
    "Organization",
    "Page",
    "Person",
    "Place",
    "Profile",
    "Public",
    "Question",
    "Read",
    "Reject",
    "Relationship",
    "Remove",
    "Service",
    "TentativeAccept",
    "TentativeReject",
    "Tombstone",
    "Travel",
    "Undo",
    "Update",
    "Video",
    "View",
    "accuracy",
    "actor",
    "alsoKnownAs",
    "altitude",
    "anyOf",
    "attachment",
    "attributedTo",
    "audience",
    "bcc",
    "bto",
    "cc",
    "closed",
    "content",
    "contentMap",
    "context",
    "current",
    "deleted",
    "describes",
    "duration",
    "endTime",
    "endpoints",
    "first",
    "followers",
    "following",
    "formerType",
    "generator",
    "height",
    "href",
    "hreflang",
    "icon",
    "image",
    "inReplyTo",
    "inbox",
    "instrument",
    "items",
    "last",
    "latitude",
    "liked",
    "likes",
    "location",
    "longitude",
    "mediaType",
    "name",
    "nameMap",
    "next",
    "oauthAuthorizationEndpoint",
    "oauthTokenEndpoint",
    "object",
    "oneOf",
    "orderedItems",
    "origin",
    "outbox",
    "partOf",
    "preferredUsername",
    "prev",
    "preview",
    "provideClientKey",
    "proxyUrl",
    "published",
    "radius",
    "rel",
    "relationship",
    "replies",
    "result",
    "sharedInbox",
    "shares",
    "signClientKey",
    "source",
    "startIndex",
    "startTime",
    "streams",
    "subject",
    "summary",
    "summaryMap",
    "tag",
    "target",
    "to",
    "totalItems",
    "units",
    "updated",
    "uploadMedia",
    "url",
    "width",
    // Mastodon
    "ostatus",
    "http://ostatus.org#",
    "atomUri",
    "ostatus:atomUri",
    "inReplyToAtomUri",
    "ostatus:inReplyToAtomUri",
    "conversation",
    "ostatus:conversation",
    "sensitive",
    "as:sensitive",
    "toot",
    "http://joinmastodon.org/ns#",
    "votersCount",
    "toot:votersCount",
    "Emoji",
    "toot:Emoji",
    "focalPoint",
    "toot:focalPoint",
];
